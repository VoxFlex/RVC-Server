import os
import subprocess
import shutil
import time
from rvc_python.infer import RVCInference

# üõ† ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
INPUT_SONG = "input/Goodbye.mp3"  # ‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
OUTPUT_FOLDER = "output_song_folder"  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
MODEL_PATH = "./voice_models/kom.pth"  # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
DEVICE = "cuda:0"  # ‡πÉ‡∏ä‡πâ GPU (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

# üõ† ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏ï‡∏≤‡∏° timestamp
timestamp = time.strftime("%Y%m%d-%H%M%S")
song_name = os.path.splitext(os.path.basename(INPUT_SONG))[0]  # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
sub_output_folder = os.path.join(OUTPUT_FOLDER, f"{song_name}_{timestamp}")
os.makedirs(sub_output_folder, exist_ok=True)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
FINAL_OUTPUT = os.path.join(sub_output_folder, f"{song_name}_converted.mp3")

### 1Ô∏è‚É£ ‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏î‡∏ô‡∏ï‡∏£‡∏µ (‡πÉ‡∏ä‡πâ Spleeter CLI)
def separate_vocals(input_song, output_folder):
    print("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Spleeter CLI...")
    
    temp_folder = os.path.join(output_folder, "spleeter_output")
    os.makedirs(temp_folder, exist_ok=True)

    # ‡∏£‡∏±‡∏ô Spleeter
    ffmpeg_command = [
        "spleeter", "separate",
        "-p", "spleeter:2stems",  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• 2stems (vocals + accompaniment)
        "-o", temp_folder,
        input_song
    ]

    try:
        subprocess.run(ffmpeg_command, check=True)
        print("‚úÖ ‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå vocals.wav ‡πÅ‡∏•‡∏∞ accompaniment.wav
        extracted_folder = os.path.join(temp_folder, os.path.basename(input_song).replace(".mp3", ""))
        vocals_path = os.path.join(extracted_folder, "vocals.wav")
        accompaniment_path = os.path.join(extracted_folder, "accompaniment.wav")

        if not os.path.exists(vocals_path) or not os.path.exists(accompaniment_path):
            raise FileNotFoundError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå vocals.wav ‡∏´‡∏£‡∏∑‡∏≠ accompaniment.wav!")

        return vocals_path, accompaniment_path, temp_folder

    except subprocess.CalledProcessError as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á:", e)
        return None, None, None

### 2Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ RVC
def convert_vocals(vocals_path, output_path, model_path):
    print("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ RVC...")

    try:
        rvc = RVCInference(models_dir="./rvc_models", device=DEVICE)
        rvc.load_model(model_path)
        rvc.set_params(f0method="rmvpe", f0up_key=0, index_rate=0.75, protect=0.5)

        rvc.infer_file(vocals_path, output_path)
        rvc.unload_model()

        print("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", output_path)
        return output_path

    except Exception as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á:", str(e))
        return None

### 3Ô∏è‚É£ ‡∏£‡∏ß‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏î‡∏ô‡∏ï‡∏£‡∏µ (‡πÉ‡∏ä‡πâ FFmpeg CLI)
def merge_audio(vocals_converted, accompaniment, final_output):
    print("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ FFmpeg CLI...")

    vocals_stereo = vocals_converted.replace(".wav", "_stereo.wav")

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á mono ‡πÄ‡∏õ‡πá‡∏ô stereo ‡∏Å‡πà‡∏≠‡∏ô
    ffmpeg_convert_mono_to_stereo = [
        "ffmpeg",
        "-i", vocals_converted,
        "-af", "pan=stereo|c0=c0|c1=c0",
        vocals_stereo
    ]

    try:
        subprocess.run(ffmpeg_convert_mono_to_stereo, check=True)
        print("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Stereo ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", vocals_stereo)
    except subprocess.CalledProcessError as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á mono -> stereo:", e)
        return

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏ß‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏î‡∏ô‡∏ï‡∏£‡∏µ
    ffmpeg_command = [
        "ffmpeg",
        "-i", accompaniment,
        "-i", vocals_stereo,
        "-filter_complex",
        "[1:a]volume=2.0,adelay=0|0[louder_vocals];"
        "[0:a][louder_vocals]amix=inputs=2:duration=longest:dropout_transition=2,loudnorm=I=-16:TP=-1.5:LRA=11[out]",
        "-map", "[out]",
        "-c:a", "libmp3lame",
        "-b:a", "192k",
        "-y",
        final_output
    ]

    try:
        subprocess.run(ffmpeg_command, check=True)
        print("‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", final_output)
    except subprocess.CalledProcessError as e:
        print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á:", e)

### 4Ô∏è‚É£ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
def clean_temp_files(*paths):
    for path in paths:
        if path and os.path.exists(path):
            if os.path.isdir(path):
                shutil.rmtree(path)  # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            else:
                os.remove(path)  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            print(f"üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå/‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {path}")

try:
    vocals, accompaniment, temp_folder = separate_vocals(INPUT_SONG, sub_output_folder)

    if vocals and accompaniment:
        converted_vocals = os.path.join(sub_output_folder, f"{song_name}_converted.wav")

        converted_vocals = convert_vocals(vocals, converted_vocals, MODEL_PATH)
        if converted_vocals:
            merge_audio(converted_vocals, accompaniment, FINAL_OUTPUT)
            print("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß:", FINAL_OUTPUT)

    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    clean_temp_files(temp_folder, vocals, accompaniment, converted_vocals)

except Exception as e:
    print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", str(e))
    # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error
    clean_temp_files(sub_output_folder)
